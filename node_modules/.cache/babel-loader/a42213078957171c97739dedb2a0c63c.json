{"ast":null,"code":"var _jsxFileName = \"/Users/avehghasemian/Desktop/FoodOrderApp/React-FoodOrderApp/src/store/CartProvider.js\";\nimport { useReducer } from 'react'; //51)useReducer for managing state\n\nimport CartContext from './cart-context'; //53)defin an object\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {}; //52**)then outside of component, add cartReducer\n\nconst cartReducer = (state, action) => {\n  return;\n}; //41) make CartContext.provider and props.children \n//let to wrap any components that must get access to this component\n\n\nconst CartProvider = props => {\n  //43) addItem...get the item and do sth with--remove...get ID do sth wth it\n  const addItemToCartHandler = item => {};\n\n  const removeItemFromCartHandler = id => {}; //44)and points them at this function\n\n\n  const cartContext = {\n    items: [],\n    totalamount: 0,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  }; //45*) now point cartContext as value to provider => 46) to App.js\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}; //51)get item that must be added to cart, and check if item existe!\n//and manage state in this component\n\n\n_c = CartProvider;\nexport default CartProvider; //42) cartContext is a helper const that is an object, this ll be concrete contexte \n//value that ll be updated over time\n//in the end we manage our cart data here\n//goal of this file is manage cart-context data and \n//provide that context to all components that want access to it\n//* can use CartProvider component to wrap all components that need to cart\n//at our app all components are rendered in App, Cart need acces to\n//render cartItems, Header, badge too, and meals need Cart, add or remove\n// so can replace CartProvider in App.js\n//** ooutside of component bcz useReducer won't need any surrounding data\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/avehghasemian/Desktop/FoodOrderApp/React-FoodOrderApp/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","cartReducer","state","action","CartProvider","props","addItemToCartHandler","item","removeItemFromCartHandler","id","cartContext","items","totalamount","addItem","removeItem","children"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;;AACA,MAAMC,gBAAgB,GAAG,EAAzB,C,CAKA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC;AACH,CAFD,C,CAIA;AACA;;;AACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAChC;AACI,QAAMC,oBAAoB,GAAGC,IAAI,IAAI,CAAE,CAAvC;;AAEA,QAAMC,yBAAyB,GAAGC,EAAE,IAAI,CAAE,CAA1C,CAJ4B,CAMhC;;;AACI,QAAMC,WAAW,GAAG;AAChBC,IAAAA,KAAK,EAAE,EADS;AAEhBC,IAAAA,WAAW,EAAE,CAFG;AAGhBC,IAAAA,OAAO,EAAEP,oBAHO;AAIhBQ,IAAAA,UAAU,EAAEN;AAJI,GAApB,CAP4B,CAahC;;AACI,sBACA,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACKL,KAAK,CAACU;AADX;AAAA;AAAA;AAAA;AAAA,UADA;AAKH,CAnBD,C,CAoBA;AACA;;;KArBMX,Y;AAsBN,eAAeA,YAAf,C,CACA;AACA;AAEA;AACA;AACA;AACC;AACA;AACA;AACA;AAEA","sourcesContent":["import { useReducer } from 'react';\n//51)useReducer for managing state\nimport CartContext from './cart-context';\n\n//53)defin an object\nconst defaultCartState = {\n    \n}\n\n\n//52**)then outside of component, add cartReducer\nconst cartReducer = (state, action) => {\n    return \n};\n\n//41) make CartContext.provider and props.children \n//let to wrap any components that must get access to this component\nconst CartProvider = (props) => { \n//43) addItem...get the item and do sth with--remove...get ID do sth wth it\n    const addItemToCartHandler = item => {}; \n    \n    const removeItemFromCartHandler = id => {}; \n\n//44)and points them at this function\n    const cartContext = {\n        items: [],\n        totalamount: 0,\n        addItem: addItemToCartHandler,\n        removeItem: removeItemFromCartHandler,\n    };\n//45*) now point cartContext as value to provider => 46) to App.js\n    return (\n    <CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n    );\n};\n//51)get item that must be added to cart, and check if item existe!\n//and manage state in this component\nexport default CartProvider;\n//42) cartContext is a helper const that is an object, this ll be concrete contexte \n//value that ll be updated over time\n\n//in the end we manage our cart data here\n//goal of this file is manage cart-context data and \n//provide that context to all components that want access to it\n //* can use CartProvider component to wrap all components that need to cart\n //at our app all components are rendered in App, Cart need acces to\n //render cartItems, Header, badge too, and meals need Cart, add or remove\n // so can replace CartProvider in App.js\n\n //** ooutside of component bcz useReducer won't need any surrounding data"]},"metadata":{},"sourceType":"module"}