{"ast":null,"code":"var _jsxFileName = \"/Users/avehghasemian/Desktop/FoodOrderApp/React-FoodOrderApp/src/components/Layout/HeaderCartButton.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\"; //100) useEffcet\n//47) add useContxte here and use it in header cart button, need to\n//import cartContext here\n\nimport CartIcon from \"../Cart/CartIcon\";\nimport classes from \"./HeaderCartButton.module.css\";\nimport CartContext from \"../../store/cart-context\"; //6) add CartIcon in first span- => 7) to availableMeals\n//36)to handle button set props.onClick then pass to App.js for 37) for onClose\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HeaderCartButton = props => {\n  _s();\n\n  //102) use effect\n  const [btnIsHighlighted, setBtnIsHighlighted] = useState(false);\n  const cartCtx = useContext(CartContext); //48*) call useContext & pass this cart contxte to it\n\n  const {\n    items\n  } = cartCtx; //49**) so we can use this to output our number of cart items length\n  //and use reduce() that let us to transform an array of data into a single value\n\n  const numberOfCartItems = cartCtx.items.reduce((curNumber, item) => {\n    return curNumber + item.amount;\n  }, 0);\n  const numberOfCartItem = cartCtx.items.reduce((curNumber, item) => {\n    return curNumber + item;\n  }); //99) add animation whenever add or remove item to carte -- add css animation\n  //${btnIsHighlighted ? classes.bump : ''} at this way:\n  //for setting animation use useEffect\n\n  const btnClasses = `${classes.button} ${btnIsHighlighted ? classes.bump : \"\"}`; //101)call useEffect with dependencies -- wnna change button classes to\n  //include bump animation class then set a timer that remove tha class again\n  //so if it's added again in future. so need to useState, bcz need to reevalute adn re-render this component when animation class is added\n\n  useEffect(() => {\n    //103)\n    if (items.length === 0) {\n      return;\n    }\n\n    setBtnIsHighlighted(true); //104) remove class after animation finished by setting timer here\n\n    const timer = setTimeout(() => {\n      setBtnIsHighlighted(false);\n    }, 300); //play 300 s, duration of animation in css file, so after that duration a function ll trigger\n    //105)if return a function useEffect, it ll be called automatically as\n    //cleanup func by React, so when effect rerun we clear timer\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [items]);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: btnClasses,\n    onClick: props.onClick,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: classes.icon,\n      children: /*#__PURE__*/_jsxDEV(CartIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Your Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: classes.badge,\n      children: numberOfCartItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this) //50) number of 3 output {numberOfCartItems} =>51)cartProvider\n  ;\n};\n\n_s(HeaderCartButton, \"mY+PPfE43aeTZpe9F3TN9SbH6iI=\");\n\n_c = HeaderCartButton;\nexport default HeaderCartButton; //in this component having an icon, some text, a little badge\n//with current number of items in cart, so need 3 span\n//*to get access to this cartContext which is managed in App.js by\n//cartProvider-- by using useContext here the headerCartbutton ll be reevaluted\n//by React whenever context changes, when cartProvider is updated befor\n//** for that it takes 2 arguments: 1. is a function 2. starting value\n//here using 0. First argument which is a function takes 2 arguments itself\n//curNumber is different for every item that calling it and it is\n//a number of value during execution, 0 ll be result of what you return\n//in previous execution.\n\nvar _c;\n\n$RefreshReg$(_c, \"HeaderCartButton\");","map":{"version":3,"sources":["/Users/avehghasemian/Desktop/FoodOrderApp/React-FoodOrderApp/src/components/Layout/HeaderCartButton.js"],"names":["useContext","useEffect","useState","CartIcon","classes","CartContext","HeaderCartButton","props","btnIsHighlighted","setBtnIsHighlighted","cartCtx","items","numberOfCartItems","reduce","curNumber","item","amount","numberOfCartItem","btnClasses","button","bump","length","timer","setTimeout","clearTimeout","onClick","icon","badge"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD,C,CACA;AACA;AACA;;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB,C,CAEA;AACA;;;;AACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAClC;AACA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,KAAD,CAAxD;AAEA,QAAMQ,OAAO,GAAGV,UAAU,CAACK,WAAD,CAA1B,CAJkC,CAKlC;;AAEA,QAAM;AAAEM,IAAAA;AAAF,MAAYD,OAAlB,CAPkC,CAQlC;AACA;;AACA,QAAME,iBAAiB,GAAGF,OAAO,CAACC,KAAR,CAAcE,MAAd,CAAqB,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AAClE,WAAOD,SAAS,GAAGC,IAAI,CAACC,MAAxB;AACD,GAFyB,EAEvB,CAFuB,CAA1B;AAKA,QAAMC,gBAAgB,GAAGP,OAAO,CAACC,KAAR,CAAcE,MAAd,CAAqB,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AAE/D,WAAOD,SAAS,GAAGC,IAAnB;AACH,GAHwB,CAAzB,CAfkC,CAoBlC;AACA;AACA;;AAEA,QAAMG,UAAU,GAAI,GAAEd,OAAO,CAACe,MAAO,IAAGX,gBAAgB,GAAGJ,OAAO,CAACgB,IAAX,GAAkB,EACzE,EADD,CAxBkC,CA0BlC;AACA;AACA;;AACAnB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIU,KAAK,CAACU,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACD;;AACDZ,IAAAA,mBAAmB,CAAC,IAAD,CAAnB,CALc,CAMd;;AACA,UAAMa,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC7Bd,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,KAFuB,EAErB,GAFqB,CAAxB,CAPc,CASL;AACT;AACA;;AACA,WAAO,MAAM;AACXe,MAAAA,YAAY,CAACF,KAAD,CAAZ;AACD,KAFD;AAGD,GAfQ,EAeN,CAACX,KAAD,CAfM,CAAT;AAiBA,sBACE;AAAQ,IAAA,SAAS,EAAEO,UAAnB;AAA+B,IAAA,OAAO,EAAEX,KAAK,CAACkB,OAA9C;AAAA,4BACE;AAAM,MAAA,SAAS,EAAErB,OAAO,CAACsB,IAAzB;AAAA,6BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAM,MAAA,SAAS,EAAEtB,OAAO,CAACuB,KAAzB;AAAA,gBAAiCf;AAAjC;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAOY;AAPZ;AASD,CAvDD;;GAAMN,gB;;KAAAA,gB;AAyDN,eAAeA,gBAAf,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\n//100) useEffcet\n//47) add useContxte here and use it in header cart button, need to\n//import cartContext here\nimport CartIcon from \"../Cart/CartIcon\";\nimport classes from \"./HeaderCartButton.module.css\";\nimport CartContext from \"../../store/cart-context\";\n\n//6) add CartIcon in first span- => 7) to availableMeals\n//36)to handle button set props.onClick then pass to App.js for 37) for onClose\nconst HeaderCartButton = (props) => {\n  //102) use effect\n  const [btnIsHighlighted, setBtnIsHighlighted] = useState(false);\n\n  const cartCtx = useContext(CartContext);\n  //48*) call useContext & pass this cart contxte to it\n\n  const { items } = cartCtx;\n  //49**) so we can use this to output our number of cart items length\n  //and use reduce() that let us to transform an array of data into a single value\n  const numberOfCartItems = cartCtx.items.reduce((curNumber, item) => {\n    return curNumber + item.amount;\n  }, 0);\n\n\n  const numberOfCartItem = cartCtx.items.reduce((curNumber, item) => {\n\n      return curNumber + item\n  })\n\n  //99) add animation whenever add or remove item to carte -- add css animation\n  //${btnIsHighlighted ? classes.bump : ''} at this way:\n  //for setting animation use useEffect\n\n  const btnClasses = `${classes.button} ${btnIsHighlighted ? classes.bump : \"\"\n  }`;\n  //101)call useEffect with dependencies -- wnna change button classes to\n  //include bump animation class then set a timer that remove tha class again\n  //so if it's added again in future. so need to useState, bcz need to reevalute adn re-render this component when animation class is added\n  useEffect(() => {\n    //103)\n    if (items.length === 0) {\n      return;\n    }\n    setBtnIsHighlighted(true);\n    //104) remove class after animation finished by setting timer here\n    const timer = setTimeout(() => {\n      setBtnIsHighlighted(false);\n    }, 300); //play 300 s, duration of animation in css file, so after that duration a function ll trigger\n    //105)if return a function useEffect, it ll be called automatically as\n    //cleanup func by React, so when effect rerun we clear timer\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [items]);\n\n  return (\n    <button className={btnClasses} onClick={props.onClick}>\n      <span className={classes.icon}>\n        <CartIcon />\n      </span>\n      <span>Your Cart</span>\n      <span className={classes.badge}>{numberOfCartItems}</span>\n    </button> //50) number of 3 output {numberOfCartItems} =>51)cartProvider\n  );\n};\n\nexport default HeaderCartButton;\n\n//in this component having an icon, some text, a little badge\n//with current number of items in cart, so need 3 span\n\n//*to get access to this cartContext which is managed in App.js by\n//cartProvider-- by using useContext here the headerCartbutton ll be reevaluted\n//by React whenever context changes, when cartProvider is updated befor\n\n//** for that it takes 2 arguments: 1. is a function 2. starting value\n//here using 0. First argument which is a function takes 2 arguments itself\n//curNumber is different for every item that calling it and it is\n//a number of value during execution, 0 ll be result of what you return\n//in previous execution.\n"]},"metadata":{},"sourceType":"module"}