{"ast":null,"code":"var _jsxFileName = \"/Users/avehghasemian/Desktop/FoodOrderApp/React-FoodOrderApp/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react'; //51)useReducer for managing state\n\nimport CartContext from './cart-context'; //53)defin an object and return it in cartReducer\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; //52**)then outside of component, add cartReducer\n\nconst cartReducer = (state, action) => {\n  //58)now go here to start adding logic for adding a cart item here\n  if (action.type === 'ADD') {\n    //here update cartItems and totalAmount\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; //91) check if item is already part of cart !    \n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); //92) get existing cartItem\n\n    const existingCartItem = state.items[existingCartItemIndex]; //93) add updatedItem & updateItems\n\n    let updatedItem;\n    const updatedItems = state.items.concat(action.item);\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n}; //let to wrap any components that must get access to this component\n\n\nconst CartProvider = props => {\n  _s();\n\n  //54***) call useReducer, then make deconstruction\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState); //43) addItem...get the item and do sth with--remove...get ID do sth wth it\n\n  const addItemToCartHandler = item => {\n    //57****) start dispatching state by adding items to cart\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    }); //second item point (item)\n  }; //so forwarding item to reducer\n\n\n  const removeItemFromCartHandler = id => {\n    //59*****) => 60) to MealItemForm.js\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  }; //44)and points them at this function -- 55) carteState need to construct this object\n\n\n  const cartContext = {\n    //56) replace [] by cartState.items - totalAmount by cartState.totalAmount\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  }; //41) make CartContext.provider and props.children \n  //45*) now point cartContext as value to provider => 46) to App.js\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}; //51)get item that must be added to cart, and check if item existe!\n//and manage state in this component\n\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider; //42) cartContext is a helper const that is an object, this ll be concrete contexte \n//value that ll be updated over time\n//in the end we manage our cart data here\n//goal of this file is manage cart-context data and \n//provide that context to all components that want access to it\n//* can use CartProvider component to wrap all components that need to cart\n//at our app all components are rendered in App, Cart need acces to\n//render cartItems, Header, badge too, and meals need Cart, add or remove\n// so can replace CartProvider in App.js\n//** ooutside of component bcz useReducer won't need any surrounding data\n//*** just point it not executed here. in CartProvider, defaultcartState\n//is initial state\n//**** dispatchCartAction, an action must be an object ({}) has some properties\n//which let to identify that action inside of reducer of function here cartReducer\n//*****60)for ensuring that addItemToCartHandler is called for that need to go place \n//wanna call context object in MealItemForm.js\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/avehghasemian/Desktop/FoodOrderApp/React-FoodOrderApp/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItem","updatedItems","concat","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;;AACA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,WAAW,EAAE;AAFQ,CAAzB,C,CAIA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC;AACI,MAAGA,MAAM,CAACC,IAAP,KAAgB,KAAnB,EAA0B;AAAC;AACvB,UAAMC,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAA/E,CADsB,CAE1B;;AACC,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAC7BJ,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EADH,CAA9B,CAHyB,CAKzB;;AACA,UAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB,CANyB,CAO1B;;AACA,QAAII,WAAJ;AACI,UAAMC,YAAY,GAAGZ,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAArB;AACA,WAAO;AACHP,MAAAA,KAAK,EAAEe,YADJ;AAEHd,MAAAA,WAAW,EAAEK;AAFV,KAAP;AAIH;;AACD,SAAOP,gBAAP;AACH,CAlBD,C,CAoBA;;;AACA,MAAMkB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAAE;AAC/B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCvB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAlD,CAD6B,CAGhC;;AACI,QAAMsB,oBAAoB,GAAId,IAAD,IAAU;AAC3C;AACIa,IAAAA,kBAAkB,CAAC;AAACf,MAAAA,IAAI,EAAE,KAAP;AAAcE,MAAAA,IAAI,EAAEA;AAApB,KAAD,CAAlB,CAFuC,CAEO;AAC7C,GAHD,CAJ4B,CAOzB;;;AAEH,QAAMe,yBAAyB,GAAGV,EAAE,IAAI;AAC5C;AACIQ,IAAAA,kBAAkB,CAAC;AAACf,MAAAA,IAAI,EAAE,QAAP;AAAiBO,MAAAA,EAAE,EAAEA;AAArB,KAAD,CAAlB;AACC,GAHD,CAT4B,CAchC;;;AACI,QAAMW,WAAW,GAAG;AAAC;AACjBvB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADD;AAEhBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAFP;AAGhBuB,IAAAA,OAAO,EAAEH,oBAHO;AAIhBI,IAAAA,UAAU,EAAEH;AAJI,GAApB,CAf4B,CAqBhC;AACA;;AACI,sBACA,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACKL,KAAK,CAACQ;AADX;AAAA;AAAA;AAAA;AAAA,UADA;AAKH,CA5BD,C,CA6BA;AACA;;;GA9BMT,Y;;KAAAA,Y;AA+BN,eAAeA,YAAf,C,CACA;AACA;AAIA;AACA;AACA;AACC;AACA;AACA;AACA;AAEA;AAEA;AACA;AAED;AACA;AAGA;AACA","sourcesContent":["import { useReducer } from 'react';\n//51)useReducer for managing state\nimport CartContext from './cart-context';\n\n//53)defin an object and return it in cartReducer\nconst defaultCartState = {\n    items: [],\n    totalAmount: 0  \n};\n//52**)then outside of component, add cartReducer\nconst cartReducer = (state, action) => {\n//58)now go here to start adding logic for adding a cart item here\n    if(action.type === 'ADD') {//here update cartItems and totalAmount\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;    \n    //91) check if item is already part of cart !    \n     const existingCartItemIndex = state.items.findIndex\n     (item => item.id === action.item.id);\n     //92) get existing cartItem\n     const existingCartItem = state.items[existingCartItemIndex];\n    //93) add updatedItem & updateItems\n    let updatedItem\n        const updatedItems = state.items.concat(action.item);\n        return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount\n        };\n    }\n    return defaultCartState;\n};\n\n//let to wrap any components that must get access to this component\nconst CartProvider = (props) => { //54***) call useReducer, then make deconstruction\n   const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n    \n//43) addItem...get the item and do sth with--remove...get ID do sth wth it\n    const addItemToCartHandler = (item) => { \n//57****) start dispatching state by adding items to cart\n    dispatchCartAction({type: 'ADD', item: item}) //second item point (item)\n    }; //so forwarding item to reducer\n\n    const removeItemFromCartHandler = id => {\n//59*****) => 60) to MealItemForm.js\n    dispatchCartAction({type: 'REMOVE', id: id});\n    }; \n\n//44)and points them at this function -- 55) carteState need to construct this object\n    const cartContext = {//56) replace [] by cartState.items - totalAmount by cartState.totalAmount\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler,\n        removeItem: removeItemFromCartHandler,\n    };\n//41) make CartContext.provider and props.children \n//45*) now point cartContext as value to provider => 46) to App.js\n    return (\n    <CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n    );\n};\n//51)get item that must be added to cart, and check if item existe!\n//and manage state in this component\nexport default CartProvider;\n//42) cartContext is a helper const that is an object, this ll be concrete contexte \n//value that ll be updated over time\n\n\n\n//in the end we manage our cart data here\n//goal of this file is manage cart-context data and \n//provide that context to all components that want access to it\n //* can use CartProvider component to wrap all components that need to cart\n //at our app all components are rendered in App, Cart need acces to\n //render cartItems, Header, badge too, and meals need Cart, add or remove\n // so can replace CartProvider in App.js\n\n //** ooutside of component bcz useReducer won't need any surrounding data\n\n //*** just point it not executed here. in CartProvider, defaultcartState\n //is initial state\n\n//**** dispatchCartAction, an action must be an object ({}) has some properties\n//which let to identify that action inside of reducer of function here cartReducer\n\n\n//*****60)for ensuring that addItemToCartHandler is called for that need to go place \n//wanna call context object in MealItemForm.js"]},"metadata":{},"sourceType":"module"}